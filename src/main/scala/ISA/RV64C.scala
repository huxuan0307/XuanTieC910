package ISA

import chisel3.util.BitPat

object RV64C extends Decoder16Bits {
  // RVC Instruction Set
  // Quadrant 0
  def c_addi4spn  = BitPat("b000_???_???_??_???_00")
  // Quadrant 1
  def c_addi      = BitPat("b000_?_?????_?????_01")
  def c_addiw     = BitPat("b001_?_?????_?????_01")
  def c_li        = BitPat("b010_?_?????_?????_01")
  def c_addi16sp  = BitPat("b011_?_00010_?????_01")
  def c_lui       = BitPat("b011_?_?????_?????_01")
  def c_srli      = BitPat("b100_?_00_???_?????_01")
  def c_srai      = BitPat("b100_?_01_???_?????_01")
  def c_andi      = BitPat("b100_?_10_???_?????_01")
  def c_sub       = BitPat("b100_0_11_???_00_???_01")
  def c_xor       = BitPat("b100_0_11_???_01_???_01")
  def c_or        = BitPat("b100_0_11_???_10_???_01")
  def c_and       = BitPat("b100_0_11_???_11_???_01")
  def c_subw      = BitPat("b100_1_11_???_00_???_01")
  def c_addw      = BitPat("b100_1_11_???_01_???_01")
  // Quadrant 1
  def c_slli    = BitPat("b000_?_?????_?????_10")
  def c_mv      = BitPat("b100_0_?????_?????_10")
  def c_add     = BitPat("b100_1_?????_?????_10")
  def c_ebreak  = BitPat("b100_1_00000_00000_10")
  def c_j       = BitPat("b101_?_??_???_??_???_01")
  def c_beqz    = BitPat("b110_?_??_???_??_???_01")
  def c_bnez    = BitPat("b111_?_??_???_??_???_01")
  def c_jr      = BitPat("b100_0_??_???_??_???_10")
  def c_jalr    = BitPat("b100_1_??_???_00_000_10")
}
