package ISA

import chisel3.util.BitPat

object RV64I extends Decoder32Bits {
  // RV32I Base Instruction Set
  // U-type               |-func7-|-rs2-|-rs1-|-funct3-|--rd-|opcode|
  def lui       = BitPat("b???????_?????_?????___???____?????_0110111")
  def auipc     = BitPat("b???????_?????_?????___???____?????_0010111")
  // J-type
  def jal       = BitPat("b???????_?????_?????___???____?????_1101111")
  // I-type               |-func7-|-rs2-|-rs1-|-funct3-|--rd-|opcode|
  def jalr      = BitPat("b???????_?????_?????___000____?????_1100111")
  // B-type               |-func7-|-rs2-|-rs1-|-funct3-|--rd-|opcode|
  def beq       = BitPat("b???????_?????_?????___000____?????_1100011")
  def bne       = BitPat("b???????_?????_?????___001____?????_1100011")
  def blt       = BitPat("b???????_?????_?????___100____?????_1100011")
  def bge       = BitPat("b???????_?????_?????___101____?????_1100011")
  def bltu      = BitPat("b???????_?????_?????___110____?????_1100011")
  def bgeu      = BitPat("b???????_?????_?????___111____?????_1100011")
  // I-type               |-func7-|-rs2-|-rs1-|-funct3-|--rd-|opcode|
  def lb        = BitPat("b???????_?????_?????___000____?????_0000011")
  def lh        = BitPat("b???????_?????_?????___001____?????_0000011")
  def lw        = BitPat("b???????_?????_?????___010____?????_0000011")
  def lbu       = BitPat("b???????_?????_?????___100____?????_0000011")
  def lhu       = BitPat("b???????_?????_?????___101____?????_0000011")
  // S-type               |-func7-|-rs2-|-rs1-|-funct3-|-imm-|opcode|
  def sb        = BitPat("b???????_?????_?????___000____?????_0100011")
  def sh        = BitPat("b???????_?????_?????___001____?????_0100011")
  def sw        = BitPat("b???????_?????_?????___010____?????_0100011")
  // I-type               |-func7-|-rs2-|-rs1-|-funct3-|--rd-|opcode|
  def addi      = BitPat("b???????_?????_?????___000____?????_0010011")
  def slti      = BitPat("b???????_?????_?????___010____?????_0010011")
  def sltiu     = BitPat("b???????_?????_?????___011____?????_0010011")
  def xori      = BitPat("b???????_?????_?????___100____?????_0010011")
  def ori       = BitPat("b???????_?????_?????___110____?????_0010011")
  def andi      = BitPat("b???????_?????_?????___111____?????_0010011")
  // R-type               |-func7-|-rs2-|-rs1-|-funct3-|--rd-|opcode|
  def add       = BitPat("b0000000_?????_?????___000____?????_0110011")
  def sub       = BitPat("b0100000_?????_?????___000____?????_0110011")
  def sll       = BitPat("b0000000_?????_?????___001____?????_0110011")
  def slt       = BitPat("b0000000_?????_?????___010____?????_0110011")
  def sltu      = BitPat("b0000000_?????_?????___011____?????_0110011")
  def xor       = BitPat("b0000000_?????_?????___100____?????_0110011")
  def srl       = BitPat("b0000000_?????_?????___101____?????_0110011")
  def sra       = BitPat("b0100000_?????_?????___101____?????_0110011")
  def or        = BitPat("b0000000_?????_?????___110____?????_0110011")
  def and       = BitPat("b0000000_?????_?????___111____?????_0110011")
  def fence     = BitPat("b???????_?????_?????___000____?????_0001111")
  def ecall     = BitPat("b0000000_00000_00000___000____00000_1110011")
  def ebreak    = BitPat("b0000000_00001_00000___000____00000_1110011")
  // RV64I Base Instruction Set(in addition to RV32I)
  // I-type                   |-func7-|-rs2-|-rs1-|-funct3-|--rd-|opcode|
  def ld        = BitPat("b???????_?????_?????___011____?????_0000011")
  def lwu       = BitPat("b???????_?????_?????___110____?????_0000011")
  // S-type               |-func7-|-rs2-|-rs1-|-funct3-|-imm-|opcode|
  def sd        = BitPat("b???????_?????_?????___011____?????_0100011")
  // I-type               |-func6|-shamt|-rs1-|-funct3-|--rd-|opcode|
  def slli      = BitPat("b000000_??????_?????___001____?????_0010011")
  def srli      = BitPat("b000000_??????_?????___101____?????_0010011")
  def srai      = BitPat("b010000_??????_?????___101____?????_0010011")
  // I-type               |-func7-|-rs2-|-rs1-|-funct3-|--rd-|opcode|
  def addiw     = BitPat("b???????_?????_?????___000____?????_0011011")
  // IS-type              |-func7-|shamt|-rs1-|-funct3-|--rd-|opcode|
  def slliw     = BitPat("b0000000_?????_?????___001____?????_0011011")
  def srliw     = BitPat("b0000000_?????_?????___101____?????_0011011")
  def sraiw     = BitPat("b0100000_?????_?????___101____?????_0011011")
  // R-type               |-func7-|-rs2-|-rs1-|-funct3-|--rd-|opcode|
  def addw      = BitPat("b0000000_?????_?????___000____?????_0111011")
  def subw      = BitPat("b0100000_?????_?????___000____?????_0111011")
  def sllw      = BitPat("b0000000_?????_?????___001____?????_0111011")
  def srlw      = BitPat("b0000000_?????_?????___101____?????_0111011")
  def sraw      = BitPat("b0100000_?????_?????___101____?????_0111011")
  // Pesudo
  def pseudo_auipc   = BitPat("b???????_?????_?????___???____?????_0011111")
}
